@import "../../node_modules/normalize.css/normalize.css";

$fancy-font: "Poiret One", cursive;
$font-size: 16px;

$breakpoints: ("small": 767px, "medium": 992px, "large": 1200px) !default;

@function getRem($size) {
  @return #{($size / 16)}rem;
}

@mixin respond-to($breakpoint, $orientation: null) {
  @if map-has-key($breakpoints, $breakpoint) {
    @if ($orientation) {
      @media (max-width: map-get($breakpoints, $breakpoint)) and (orientation: #{$orientation}) {
        @content;
      }
    } @else {
      @media (max-width: map-get($breakpoints, $breakpoint)) {
        @content;
      }
    }
  } @else {
    @warn "Unfortunately,
      no value could be retrieved from `#{$breakpoint}`. " + "Available breakpoints are: #{map-keys($breakpoints)}.";
  }
}

html,
body {
  font-family: Courier New, Courier, monospace;
  font-size: $font-size;
  box-sizing: border-box;
}

input:focus,
select:focus,
textarea:focus,
button:focus {
  outline: none;
}

.container {
  max-width: 1000px;
  width: 100%;
  margin: 0;
}

header {
  margin: 50px;
  @include respond-to("small") {
    margin: 0 20px;
    flex-direction: column-reverse;
  }
}

.name {
  width: 500px;

  @include respond-to(small) {
    width: 300px;
  }

  h1 {
    font-family: $fancy-font;
    font-size: getRem(72);
    font-weight: normal;
    margin-bottom: 20px;

    @include respond-to(small) {
      font-size: getRem(50);
    }
  }
  h2 {
    font-weight: normal;

    @include respond-to(small) {
      font-size: getRem(18);
    }
  }
}

nav {
  flex: 1;
  ul {
    list-style-type: none;
    justify-content: flex-end;

    li {
      margin-left: 32px;
    }
  }
}

.flex {
  display: flex;
}

.justify-middle {
  align-items: center;
}

main {
  flex-direction: column;
  align-items: flex-end;
  justify-content: center;
  margin: 0 50px;

  @include respond-to("small") {
    margin: 0 20px;
  }
}

footer {
  position: fixed;
  bottom: 0;
  left: 0;
  line-height: 0;
  z-index: -99999;
}

.footer-triangle {
  width: 100%;
  height: 100%;

  @include respond-to("small", "landscape") {
    width: 65%;
    height: 65%;
  }
}

.siema {
  overflow: hidden;
  width: 330px;

  @include respond-to("small") {
    width: 200px;
  }

  & img {
    width: 100%;
  }
}

.slider {
  float: right;
  & > p {
    text-align: center;
  }
}

.circle {
  width: 42px;
  height: 42px;
  border-radius: 50%;
  border: none;

  background-color: rgba(0, 0, 0, 0.1);
  background-image: url("/assets/img/icons/arrow.svg");
  background-repeat: no-repeat;
  background-position: center;
}

.rotated {
  transform: rotate(180deg);
}
